plugins {
    id "architectury-plugin" version "3.4-SNAPSHOT"
    id "dev.architectury.loom" version "1.6-SNAPSHOT" apply false
    id 'io.github.juuxel.loom-vineflower' version '1.11.0' apply false
    id "me.modmuss50.mod-publish-plugin" version "0.5.1"
}

architectury {
    minecraft = rootProject.minecraft_version
}

def getExecOutput(commands) {

    def out = new ByteArrayOutputStream()

    exec {
        commandLine commands
        standardOutput out
    }

    return out.toString().trim();
}

subprojects {
    apply plugin: "dev.architectury.loom"
    apply plugin: "me.modmuss50.mod-publish-plugin"

    version = "${rootProject.mod_version}-${rootProject.minecraft_version}-${name}"

    loom {
        silentMojangMappingsLicense()
    }

    dependencies {
        minecraft "com.mojang:minecraft:${rootProject.minecraft_version}"
        mappings loom.officialMojangMappings()
    }
}

allprojects {
    apply plugin: "java"
    apply plugin: "architectury-plugin"
    apply plugin: "maven-publish"

    archivesBaseName = "${rootProject.mod_id}-${name}"
    version = "${rootProject.minecraft_version}-${rootProject.mod_version}"
    group = rootProject.maven_group

    repositories {
        mavenLocal()
        maven {
            url "https://maven.neoforged.net/releases/"
        }
        maven {
            url = 'https://api.modrinth.com/maven/'
            content {
                includeGroup 'maven.modrinth'
            }
        }
        maven {
            url = 'https://www.cursemaven.com'
            content {
                includeGroup 'curse.maven'
            }
        }
        maven {
            url = 'https://maven.shedaniel.me'
            content {
                includeGroup 'me.shedaniel.cloth'
                includeGroup 'me.shedaniel'
            }
        }
        maven {
            url = 'https://maven.blamejared.com'
            content {
                includeGroup 'noobanidus.mods.lootr'
            }
        }
    }

    tasks.withType(JavaCompile) {
        options.encoding = "UTF-8"
        options.release = 21
    }

    java {
        withSourcesJar()
    }

    task optimizePng {
        def pngPatterns = ["**/*.png"]
        doFirst {
            println 'Executing oxipng task...'
        }
        doLast {
            //Ensure the logo is minimized (we add this file to each jar)
            //Minimize any PNGs in the source sets
            for (dir in sourceSets.main.resources.srcDirs) {
                fileTree(dir: dir, includes: pngPatterns).each { minimizePNGFile(it) }
            }
            println 'Finished oxipng task...'
        }
    }
}

//Minimize/optimize all png files, requires optipng on the PATH
// Credits: BrainStone
void minimizePNGFile(File file) {
    exec {
        executable "./oxipng.exe"
        args "-o", "6", "-i", "0", "--strip", "all", "-a", "-Z", file
    }
}

task buildAndReleaseAll{
    dependsOn(':common:buildAndRelease', ':neoforge:buildAndRelease', ':fabric:buildAndRelease')
}
